@startuml

!include ./config/diagramsConfig.puml
!include ./config/classConfig.puml

title
rootJS Architecture

end title

/' ----------------------------------------------------------------------- '/

/' Interfaces '/
' interface ROOT

/' Environment '/
class "ROOT::TApplication" as TApplication
class NodeApplication
class CallbackHandler
class NodeHandler

/' Javascript Prototypes '/
class TemplateFactory
' class TemplateCache

/' Encapsulation '/
abstract class Proxy

/' Encapsulation of ROOT functions '/
class FunctionProxyFactory
class FunctionProxy

/' Encapsulation of ROOT objects and primitives '/
class ObjectProxyFactory
class ObjectProxy

class TemplateProxy
class EnumProxy
class StructProxy
class ArrayProxy
class PointerProxy

abstract class PrimitiveProxy
class NumberProxy
class StringProxy
class BooleanProxy

/' Encapsulating the differences between TGlobals and TDataMembers '/

class MetaInfo
class GlobalInfo
class MemberInfo
class FunctionInfo
class PointerInfo

/' Class for Asynchrous wrappers '/
class AsyncRunner


/' Interfacing with ROOT's reflection mechanism - i.e. Cling '/

/' ----------------------------------------------------------------------- '/

/' Relations '/
TApplication <|-down- NodeApplication
NodeHandler -left-> NodeApplication
NodeHandler -right-> CallbackHandler

CallbackHandler ..> TemplateFactory : uses
CallbackHandler ..> ObjectProxyFactory : uses
CallbackHandler ..> FunctionProxyFactory : uses

NodeHandler ..> TemplateFactory : uses
NodeHandler ..> ObjectProxyFactory : uses
NodeHandler ..> FunctionProxyFactory : uses

Proxy <|-right- ObjectProxy
Proxy <|-left- FunctionProxy

FunctionProxyFactory .down.> FunctionProxy : creates
ObjectProxyFactory .down.> ObjectProxy : creates

ObjectProxy <|-- EnumProxy
ObjectProxy <|-- PointerProxy
ObjectProxy <|-- StructProxy
ObjectProxy <|-- ArrayProxy
ObjectProxy <|-- TemplateProxy
ObjectProxy <|-- PrimitiveProxy
PrimitiveProxy <|-- NumberProxy
PrimitiveProxy <|-- StringProxy
PrimitiveProxy <|-- BooleanProxy

MetaInfo <|-- GlobalInfo
MetaInfo <|-- MemberInfo
MetaInfo <|-- FunctionInfo
MetaInfo <|-- PointerInfo

Proxy ..> MetaInfo : uses


/' ----------------------------------------------------------------------- '/

/' Callback Handling '/
class CallbackHandler {
	{static} -globalObjectMap: map<string, ObjectProxy*>
	{static} -staticObjectMap: map<string, ObjectProxy*>
	{static} -globalFunctionMap: map<string, FunctionProxy*>
	{static} -staticFunctionMap: map<string, FunctionProxy*>
	--
	{static} -getInfoArgs(beginIndex: int, endIndex: int, info: FunctionCallbackInfo<Value>): Local<Array>
	{static} +registerGlobalObject(name: string, proxy: ObjectProxy*)
	{static} +globalGetterCallback(property: Local<String>, info: PropertyCallbackInfo<Value>)
	{static} +globalSetterCallback(property: Local<String>, value: Local<Value>, info: PropertyCallbackInfo<Value>)

	{static} +registerGlobalFunction(name: string, proxy: FunctionProxy*)
	{static} +globalFunctionCallback(info: FunctionCallbackInfo<Value>)

	{static} +registerStaticObject(name: string, proxy: ObjectProxy*)

	{static} +registerStaticFunction(name: string, proxy: FunctionProxy*)
	{static} +staticFunctionCallback(info: FunctionCallbackInfo<Value>)

	{static} +ctorCallback(args: FunctionCallbackInfo<Value>)
	{static} +memberGetterCallback(property: Local<String>, info: PropertyCallbackInfo<Value>)
	{static} +memberSetterCallback(property: Local<String>, value: Local<Value>, info: PropertyCallbackInfo<Value>)
	{static} +memberFunctionCallback(info: FunctionCallbackInfo<Value>)

	{static} +staticGetterCallback(property: Local<String>, info: PropertyCallbackInfo<Value>)
	{static} +staticSetterCallback(property: Local<String>, value: Local<Value>, info: PropertyCallbackInfo<Value>)
	{static} +staticFunctionCallback(args: FunctionCallbackInfo<Value>)

  ' -CallbackHandler() <<constructor>>
}

class NodeHandler {
  {static} -initialized: bool
	{static} -instance: NodeHandler*
	-exports: Local<Object>
  --
  - NodeHandler() <<constructor>>

  {static} +initialize(exports: Local<Object>, module: Local<Object>)

  -exposeROOT()
  -exposeGlobalFunctions()
  -exposeGlobals()
  -exposeMacros()
  -exposeClasses()

  +getExports(): Local<Object>
}


/' Facade '/
class NodeApplication {
	--
	+NodeApplication(acn: char*, argc: int*, argv: char**) <<constructor>>
	{static} +CreateNodeApplication(): Bool_t
	{static} +InitROOTGlobals(): Bool_t
}

/' ----------------------------------------------------------------------- '/

/' Javascript Prototypes '/
class TemplateFactory {
	{static} -classTemplates: map<string, Persistent<FunctionTemplate>>
	{static} -structTemplates: map<string, Persistent<FunctionTemplate>>	
	--
	-TemplateFactory() <<constructor>>
	{static} -classFromName(className: char*): TClass*
	{static} +getInstance(clazz: TClass*): Local<Object>
	{static} +getConstructor(clazz: TClass*): Local<Object>

	{static} +createNamespaceTemplate(clazz: TClass*): Local<FunctionTemplate>
	{static} +createEnumTemplate(clazz: TClass*): Local<FunctionTemplate>		
	{static} +createClassTemplate(clazz: TClass*): Local<FunctionTemplate>
	{static} +createStructTemplate(clazz: TClass*): Local<FunctionTemplate>
}

/' ----------------------------------------------------------------------- '/

/' Encapsulation '/
abstract class Proxy {
    #type: MetaInfo*
    #scope: TClassRef
    --
    #Proxy(type: MetaInfo, scope: TClassRef) <<constructor>>
    {abstract} +setAddress(address: void*)
    +getAddress(): void*
    +getType(): TObject
    +getScope(): TClassRef

    +isGlobal(): bool

    {abstract} +isTemplate(): bool
		{abstract} +isGlobal(): bool
    {abstract} +isConst(): bool
    {abstract} +isStatic(): bool
}

/' ----------------------------------------------------------------------- '/

/' Encapsulation of ROOT functions '/
class FunctionProxyFactory {
	{static} -basicTypeMap: map<string, v8BasicTypes>
	--
	-FunctionProxyFactory() <<constructor>>
	{static} +createFunctionProxy(function: TFunction*, scope: TClass*): FunctionProxy
	{static} +fromArgs(name: string, scope: TClass*, args: FunctionCallbackInfo<Value>): FunctionProxy*
	{static} -paramMatches(type: char*, object: Local<Value>): bool
	{static} +createInstance(type: TClass*, args: Local<Array>): void*
}

class FunctionProxy {
  {static} -functions: map<TFunction*, CallFunc*>
	-function: TFunction*
	-argsReflection: TList*
	{const} -returnType: char*
	{static} -typeMap: map<string, mappedTypes>  
  --
  {static} -processCall(method: TFunction*, args: void*, self: void*, result: void*): bool

  {static} -callConstructor(method: TFunction*, type: TClassRef, args: void*): void*
  {static} -callDestructor(type: TClassRef, self: void*): void

  {static} -callObject(method: TFunction*, self: void*, args: void*, resType: TClassRef): void*
  {static} <T> -callPrimitive(TFunction* method, void* self, void* args): T

  {static} +getCallFunc(method: TFunction*): CallFunc*
  {static} +getMethodsFromName(scope: TClassRef, name: string): vector<TFunction*>

  +FunctionProxy(address: void*, mode: FunctionInfo function: TFunction, scope: TClassRef) <<constructor>>
  +getType(): TFunction

  +validateArgs(args: FunctionCallbackInfo<Value): vector<ObjectProxy*>
  +call(args: const FunctionCallBackInfo<value>): Local<Value>
}

/' ----------------------------------------------------------------------- '/

/' Encapsulation of ROOT objects and primitives '/
class ObjectProxyFactory {
  {static} -cache: map<string, Persistent<FunctionTemplate>>
	{static} -proxyMap: map<string, ObjectProxy*>
  --
  -ObjectProxyFactory() <<constructor>>
  {static} +createObjectProxy(type: TDataMember, scope: TClassRef, holder: ObjectProxy): ObjectProxy*
	{static} +createObjectProxy(object: TGlobal): ObjectProxy*
	{static} +createObjectProxy(address: void*, type: TClassRef,proxy: Local<Object>): ObjectProxy*
	{static} +createObjectProxy(address: void*, type: TClassRef): ObjectProxy*
	{static} +determineProxy(type: MetaInfo, TClassRef): ObjectProxy*
	{static} -getClassNameFromType(char*): string
	{static} -traverseClass(TClassRef, ObjectProxy)
}
	
class ObjectProxy {
  #proxy: Persistent<Object>
	-currentMode: MetaInfo*
  --
  +ObjectProxy(type: MetaInfo, scope: TClassRef) <<constructor>>
  +getType(): TDataMember
	+getTypeName(): char*
	+getTypeInfo(): MetaInfo*
	+getOffset(): Long_t
  {abstract} +set(value: ObjectProxy)
  {abstract} +get(): Local<Value>

  {abstract} +setProxy(proxy: Local<Object>)
  {abstract} +getProxy(): Local<Object>

  {abstract} +isPrimitive(): bool
}

class BooleanProxy {
  --
  +BooleanProxy(type: MetaInfo, scope: TClassRef) <<constructor>>
	{static} +isBoolean(type: string): bool
	+get(): Local<Value>
	+setValue(value: Local<Value>)
	{static} +boolConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
}

class StringProxy {
	-strType: StringType
  --
	-c_str(): char*
  +StringProxy(type: MetaInfo, scope: TClassRef) <<constructor>>
	{static} +isString(type: string): bool
	+get(): Local<Value>
	+setValue(value: Local<Value>)
	{static} +charConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +stringConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +tStringConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
}

class NumberProxy {
  --
  +NumberProxy(type: TDataMember, scope: TClassRef) <<constructor>>
	{static} +isNumber(type: string): bool
	+get(): Local<Value>
	+setValue(value: Local<Value>)

	{static} +intConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +uintConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +shortConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +ushortConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +floatConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*

	{static} +doubleConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +ldoubleConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +longConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +ulongConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +llongConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +ullongConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +_int64Construct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +u_int64Construct(info: MetaInfo, scope: TClassRef): ObjectProxy*
}

class PrimitiveProxy {
  --
  +PrimitiveProxy(type: TDataMember, scope: TClassRef) <<constructor>>
  +isPrimitive(): bool
}

class ArrayProxy {
  --
  +ArrayProxy(type: TDataMember, scope: TClassRef) <<constructor>>
}

class PointerProxy {
--
+PointerProxy(type: TDataMember, scope: TClassRef) <<constructor>>
}

class StructProxy {
--
+StructProxy(type: TDataMember, scope: TClassRef) <<constructor>>
}

class EnumProxy {
--
+EnumProxy(type: TDataMember, scope: TClassRef) <<constructor>>
}

class TemplateProxy {
--
+TemplateProxy(type: TDataMember, scope: TClassRef) <<constructor>>
}

class MetaInfo {
  #baseAddress: void*
  --
  +MetaInfo(foo: TObject, baseAddress: void*) <<constructor>>
  +isGlobal(): bool
	+getOffset(): Long_t
	+isConst(): bool
	+isStatic(): bool
	+getTypeName(): const char*
	+getBaseAddress(): void*
	+getAddress(): void*
	+clone(): MetaInfo*
}

class MemberInfo {
	{const} +currentObject: TDataMember
	--
	+MemberInfo(foo: TDataMember, baseAddress: void*) <<constructor>>
	+isGlobal(): bool
	+getOffset(): Long_t
	+isConst(): bool
	+isStatic(): bool
	+getTypeName(): const char*
	+clone(): MetaInfo*
}

class GlobalInfo {
	{const} +currentObject: TGlobal
	--
	+GlobalInfo(type: TGlobal) <<constructor>>
	+isGlobal(): bool
	+getOffset(): Long_t
	+isConst(): bool
	+isStatic(): bool
	+getTypeName(): const char*
	+clone(): MetaInfo*
}

class FunctionInfo {
	#func: TFunction*
	--
	+isGlobal(): bool
	+getOffset(): Long_t
	+isConst(): bool
	+isStatic(): bool
	+getTypeName(): const char*
	+clone(): MetaInfo*
}

class PointerInfo {
	{const} #typeName: char*
	--
	+isGlobal(): bool
	+getOffset(): Long_t
	+isConst(): bool
	+isStatic(): bool
	+getTypeName(): const char*
	+clone(): MetaInfo*
}


@enduml
