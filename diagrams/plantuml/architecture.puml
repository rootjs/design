@startuml

!include ./config/diagramsConfig.puml
!include ./config/classConfig.puml

title
rootJS Architecture

end title

/' ----------------------------------------------------------------------- '/

/' Interfaces '/
' interface ROOT

/' Environment '/
class "ROOT::TApplication" as TApplication
class NodeApplication
class CallbackHandler
class NodeHandler

/' Javascript Prototypes '/
class TemplateFactory
' class TemplateCache

/' Encapsulation '/
abstract class Proxy

/' Encapsulation of ROOT functions '/
class FunctionProxyFactory
class FunctionProxy

/' Encapsulation of ROOT objects and primitives '/
class ObjectProxyFactory
class ObjectProxy

class TemplateProxy
class EnumProxy
class StructProxy
class ArrayProxy
class PointerProxy

abstract class PrimitiveProxy
class NumberProxy
class StringProxy
class BooleanProxy

/' Encapsulating the differences between TGlobals and TDataMembers '/

class MetaInfo
class GlobalInfo
class MemberInfo
class FunctionInfo
class PointerInfo

/' Class for Asynchrous wrappers '/
class AsyncRunner

class ClassExposer


/' Interfacing with ROOT's reflection mechanism - i.e. Cling '/

/' ----------------------------------------------------------------------- '/

/' Relations '/
TApplication <|-down- NodeApplication
NodeHandler -left-> NodeApplication
NodeHandler -right-> CallbackHandler

CallbackHandler ..> TemplateFactory : uses
CallbackHandler ..> ObjectProxyFactory : uses
CallbackHandler ..> FunctionProxyFactory : uses

NodeHandler ..> TemplateFactory : uses
NodeHandler ..> ObjectProxyFactory : uses
NodeHandler ..> FunctionProxyFactory : uses

Proxy <|-right- ObjectProxy
Proxy <|-left- FunctionProxy

FunctionProxyFactory .down.> FunctionProxy : creates
ObjectProxyFactory .down.> ObjectProxy : creates

ObjectProxy <|-- EnumProxy
ObjectProxy <|-- PointerProxy
ObjectProxy <|-- StructProxy
ObjectProxy <|-- ArrayProxy
ObjectProxy <|-- TemplateProxy
ObjectProxy <|-- PrimitiveProxy
PrimitiveProxy <|-- NumberProxy
PrimitiveProxy <|-- StringProxy
PrimitiveProxy <|-- BooleanProxy

MetaInfo <|-- GlobalInfo
MetaInfo <|-- MemberInfo
MetaInfo <|-- FunctionInfo
MetaInfo <|-- PointerInfo

Proxy ..> MetaInfo : uses


/' ----------------------------------------------------------------------- '/

/' Callback Handling '/
class CallbackHandler {
	{static} -globalObjectMap: map<string, ObjectProxy*>
	{static} -staticObjectMap: map<string, ObjectProxy*>
	{static} +CALLBACK_DATA_DELIMITER: string
	--
	{static} +registerGlobalObject(name: string, proxy: ObjectProxy*)
	{static} +globalGetterCallback(property: Local<String>, info: PropertyCallbackInfo<Value>)
	{static} +globalSetterCallback(property: Local<String>, value: Local<Value>, info: PropertyCallbackInfo<Value>)
	{static} +globalFunctionCallback(info: FunctionCallbackInfo<Value>)
	{static} +registerStaticObject(name: string, proxy: ObjectProxy*)
	{static} +staticGetterCallback(property: Local<String>, info: PropertyCallbackInfo<Value>)
	{static} +staticSetterCallback(property: Local<String>, value: Local<Value>, info: PropertyCallbackInfo<Value>)
	{static} +staticFunctionCallback(args: FunctionCallbackInfo<Value>)
	{static} +ctorCallback(args: FunctionCallbackInfo<Value>)
	{static} +memberGetterCallback(property: Local<String>, info: PropertyCallbackInfo<Value>)
	{static} +memberSetterCallback(property: Local<String>, value: Local<Value>, info: PropertyCallbackInfo<Value>)
	{static} +memberFunctionCallback(info: FunctionCallbackInfo<Value>)
	{static} +createFunctionCallbackData(functionName: string, scope: TClass*) : Local<Value>
	{static} +createFunctionCallbackData(scope: TClass*) : Local<Value>
  ' -CallbackHandler() <<constructor>>
	
	{static} -getInfoArgs(beginIndex: int, endIndex: int, info: FunctionCallbackInfo<Value>): Local<Array>
	{static} -resolveCallbackScope(data: Local<Value>, allowNull: bool): TClass*
	{static} -resolveCallbackName(data: Local<Value>): string
	{static} -toString(data: Local<Value>): string
	{static} -asyncMemberCall(runner: AsyncRunner*, param: void*)
}

class NodeHandler {
  {static} -initialized: bool
	{static} -instance: NodeHandler*
	-exports: Local<Object>
	-rootJS: Persistent<Object>
  --
  -NodeHandler() <<constructor>>
  
  -exposeROOT()
  -exposeGlobalFunctions()
  -exposeGlobals()
  -exposeMacros()
  -exposeClasses()

	{static} +initialize(exports: Local<Object>, module: Local<Object>)
  +getExports(): Local<Object>
}


/' Facade '/
class NodeApplication {
	--
	+NodeApplication(acn: char*, argc: int*, argv: char**) <<constructor>>
	{static} +CreateNodeApplication(): Bool_t
	{static} +InitROOTGlobals(): Bool_t
}

/' ----------------------------------------------------------------------- '/

/' Javascript Prototypes '/
class TemplateFactory {
	{static} -classTemplates: map<string, Persistent<FunctionTemplate>>
	{static} -structTemplates: map<string, Persistent<FunctionTemplate>>	
	--
	-TemplateFactory() <<constructor>>
	{static} -createInstantiableTemplate(clazz: TClass*, tmplt: Local<FunctionTemplate>)
	{static} -isTemplateFunction(functionName: string): bool
	{static} -isValid(clazz* TClass): bool

	{static} +getInstance(clazz: TClass*): Local<Object>
	{static} +getConstructor(clazz: TClass*): Local<Object>

	{static} +createNamespaceTemplate(clazz: TClass*): Local<ObjectTemplate>
	{static} +createEnumTemplate(clazz: TClass*): Local<ObjectTemplate>		
	{static} +createArrayTemplate(clazz: TClass*): Local<ObjectTemplate>	

	{static} +createStructTemplate(clazz: TClass*): Local<FunctionTemplate>
	{static} +createStructTemplate(clazz: TClass*): Local<FunctionTemplate>
	{static} +createClassTemplate(clazz: TClass*): Local<FunctionTemplate>

}

/' ----------------------------------------------------------------------- '/

/' Encapsulation '/
abstract class Proxy {
    #type: MetaInfo*
    #scope: TClassRef
    --
    #Proxy(type: MetaInfo, scope: TClassRef) <<constructor>>
    {abstract} +setAddress(address: void*)
    +getAddress(): void*
    +getType(): TObject
    +getScope(): TClassRef

    +isGlobal(): bool

    {abstract} +isTemplate(): bool
		{abstract} +isGlobal(): bool
    {abstract} +isConst(): bool
    {abstract} +isStatic(): bool
}

/' ----------------------------------------------------------------------- '/

/' Encapsulation of ROOT functions '/
class FunctionProxyFactory {
	{static} -basicTypeMap: map<string, v8BasicTypes>
	--
	-FunctionProxyFactory() <<constructor>>
	{static} +createFunctionProxy(function: TFunction*, scope: TClass*): FunctionProxy
	{static} +fromArgs(name: string, scope: TClass*, args: FunctionCallbackInfo<Value>): FunctionProxy*
	{static} -paramMatches(type: char*, object: Local<Value>): bool
	{static} +determineFunction(name: string, scope: TClass, args: Local<Array>): TFunction*
}

class FunctionProxy {
  {static} -functions: map<TFunction*, CallFunc*>
	{static} -typeMap: map<string, mappedTypes>  

	-facePtr: TInterpreter::CallIFacePtr_t
	-function: TFunction*
	-buf: vector<void*>
	-address: void*
	-selfAddress: void*

  --
	{static} -argToChar(orginalArg: Local<Value>): char*
	{static} -argToDouble(orginalArg: Local<Value>): double*
	{static} -argToInt(orginalArg: Local<Value>): int*
	{static} -argToBool(orginalArg: Local<Value>): bool*
	{static} -argToTString(orginalArg: Local<Value>): TString*
	{static} -getDoubleFromArg(originalArg: Local<Value>): double


  {static} +getMethodsFromName(scope: TClassRef, name: string): vector<TFunction*>
  +FunctionProxy(address: void*, mode: FunctionInfo function: TFunction, scope: TClassRef) <<constructor>>
	+clone(): FunctionProxy*
	{static} +getCallFunc(method: TFunction*): CallFunc*
	+prepareCall(args: Local<Array>)
	+call(isConstructorCall: bool): ObjectProxy*
	+setSelfAddress(addr: void*)
	+isConst(): bool
	+isGlobal(): bool
	+isStatic(): bool
	+isTemplate(): bool
}

/' ----------------------------------------------------------------------- '/

/' Encapsulation of ROOT objects and primitives '/
class ObjectProxyFactory {
	{static} -primitiveProxyMap: map<string, ObjectProxy*>
  --
  -ObjectProxyFactory() <<constructor>>

	{static} +createObjectProxy(global: TGlobal): ObjectProxy*
	{static} +createObjectProxy(info: MetaInfo, scope: TClass*): ObjectProxy*
	{static} +createObjectProxy(address: void*, type: TClass,proxy: Local<Object>): ObjectProxy*
	{static} +createPrimitiveProxy(info: MetaInfo, clazz: TClass*): ObjectProxy*
	{static} +initializeProxyMap();

	{static} -createPropertyMap(info: MetaInfo, clazz: TClass*): map<string,ObjectProxy*>*
	{static} -getClass(typeName: string): TClass*
	{static} -getEnumConstant(typeName: string): TEnumConstant*
}
	
class ObjectProxy {
  #proxy: Persistent<Object>
	-boundMallocs: vector<void*>
  --
  +ObjectProxy(type: MetaInfo, scope: TClassRef) <<constructor>>
	+getTypeName(): char*
	+getOffset(): Long_t
  +set(value: ObjectProxy)
  +get(): Local<Value>
  +setProxy(proxy: Local<Object>)
	+getProxy(): Local<Object>
	+setValue(value: Local<Value>)

  +isPrimitive(): bool
  +isTemplate(): bool
  +isGlobal(): bool
  +isConst(): bool
  +isStatic(): bool

	+registerMallocedSpace(void*)
	+getWeakPersistent(): Persistent<Object>
	{static} -weakCallback(data: WeakCallbackData<Object, ObjectProxy>)
}

class BooleanProxy {
  --
  +BooleanProxy(type: MetaInfo, scope: TClassRef) <<constructor>>
	{static} +isBoolean(type: string): bool
	+get(): Local<Value>
	+setValue(value: Local<Value>)
	{static} +boolConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
}

class StringProxy {
	-strType: StringType
	--
	-c_str(): char*
	+StringProxy(type: MetaInfo, scope: TClassRef) <<constructor>>
	{static} +isString(type: string): bool
	+get(): Local<Value>
	+setValue(value: Local<Value>)
	{static} +charConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +stringConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +tStringConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
}

class NumberProxy {
  --
	-castToDouble(void*): Double_t
  +NumberProxy(type: TDataMember, scope: TClassRef) <<constructor>>
	{static} +isNumber(type: string): bool
	+get(): Local<Value>
	+setValue(value: Local<Value>)

	{static} +intConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +uintConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +shortConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +ushortConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +floatConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*

	{static} +doubleConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +ldoubleConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +longConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +ulongConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +llongConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +ullongConstruct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +_int64Construct(info: MetaInfo, scope: TClassRef): ObjectProxy*
	{static} +u_int64Construct(info: MetaInfo, scope: TClassRef): ObjectProxy*
}

class PrimitiveProxy {
  --
  +PrimitiveProxy(type: TDataMember, scope: TClassRef) <<constructor>>
  +isPrimitive(): bool
}

class MetaInfo {
  #baseAddress: void*
  --
  +MetaInfo(foo: TObject, baseAddress: void*) <<constructor>>
	+GetOffset(): Long_t
	+isGlobal(): bool
	+isConst(): bool
	+isStatic(): bool
	+getTypeName(): char*
	+getName(): char*
	+getBaseAddress(): void*
	+getAddress(): void*
	+clone(): MetaInfo*
}

class MemberInfo {
	+type: TDataMember
	--
	+MemberInfo(foo: TDataMember, baseAddress: void*) <<constructor>>
	+GetOffset(): Long_t
	+isGlobal(): bool
	+isConst(): bool
	+isStatic(): bool
	+getTypeName(): char*
	+getName(): char*
	+clone(): MetaInfo*
}

class GlobalInfo {
	+type: TGlobal
	--
	+GlobalInfo(type: TGlobal) <<constructor>>
	+GetOffset(): Long_t
	+isGlobal(): bool
	+isConst(): bool
	+isStatic(): bool
	+getTypeName(): char*
	+getName(): char*
	+clone(): MetaInfo*
}

class FunctionInfo {
	-type: TFunction
	-mIsGlobal: bool
	--
	+GetOffset(): Long_t
	+isGlobal(): bool
	+isConst(): bool
	+isStatic(): bool
	+getTypeName(): const char*
	+getName(): char*
	+clone(): MetaInfo*
}

class PointerInfo {
	#typeName: char*
	#ptrDepth: int
	#ptr: void**
	#ptrptr: void***
	--
	+isGlobal(): bool
	+getOffset(): Long_t
	+isConst(): bool
	+isStatic(): bool
	+getTypeName(): char*
	+getName(): char*
	+clone(): MetaInfo*
}

class AsyncRunner {
	-func: AsyncRunner*
	-param: void*
	-callback: Persistent<Function, CopyablePersistentTraits<Function>>
	-result: vector<ObjectProxy>
	--
	+AsyncRunner(func: AsyncFunction*, param: void*, callback: Persistent<Function, CopyablePersistentTraits<Function>>) <<constructor>>
	+run()
	{static} +uvRunner(req: uv_work_t*)
	{static} +uvCallback(req: uv_work_t*, status: int)
	+setResult(result: vector<ObjectProxy>)
}

class ClassExposer {
	--
	-ClassExposer() <<constructor>>
	{static} +expose(clazz: TClass*, object: Local<Object>)
	{static} +splitClassName(name: string, vec: vector<string>): vector<string>
}

@enduml
