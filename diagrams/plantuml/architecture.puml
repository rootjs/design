@startuml

!include ./config/diagramsConfig.puml
!include ./config/classConfig.puml

title
rootJS Architecture

end title

/' ----------------------------------------------------------------------- '/

/' Interfaces '/
'interface V8
'interface ROOT

/' Environment '/
class "ROOT::TApplication" as TApplication
class NodeApplication << (S,#FF7700) Singleton >>

/' Javascript Prototypes '/
class TemplateFactory
' class TemplateCache

/' Encapsulation '/
abstract class Proxy

/' Encapsulation of ROOT functions '/
class ProxyFunctionFactory
class ProxyFunction

/' Encapsulation of ROOT objects and primitives '/
class ProxyObjectFactory
class ProxyObject

class TemplateProxy
class EnumProxy
class StructProxy
class ArrayProxy
class PointerProxy
class ReferenceProxy

abstract class PrimitiveProxy
class NumberProxy
class StringProxy
class BooleanProxy

/' Interfacing with ROOT's reflection mechanism - i.e. Cling '/
' class ClassHelper
' class FunctionHelper

/' ----------------------------------------------------------------------- '/

/' Relations '/
TApplication <|-down- NodeApplication

NodeApplication -down-> "1" TemplateFactory
NodeApplication --> "1" ProxyFunctionFactory
NodeApplication --> "1" ProxyObjectFactory

'TemplateFactory .left.> V8 : uses

'ClassHelper ..> ROOT : uses
'FunctionHelper ..> ROOT : uses

Proxy <|-right- ProxyObject
Proxy <|-left- ProxyFunction

' FunctionHelper <.up. ProxyFunctionFactory : uses
' ClassHelper <.up. ProxyObjectFactory : uses

ProxyFunctionFactory .down.> ProxyFunction : creates
ProxyObjectFactory .down.> ProxyObject : creates

ProxyObject <|-- TemplateProxy
ProxyObject <|-- EnumProxy
ProxyObject <|-- StructProxy
ProxyObject <|-- ArrayProxy
ProxyObject <|-- PointerProxy
ProxyObject <|-- ReferenceProxy

ProxyObject <|-- PrimitiveProxy
PrimitiveProxy <|-- NumberProxy
PrimitiveProxy <|-- StringProxy
PrimitiveProxy <|-- BooleanProxy

/' ----------------------------------------------------------------------- '/

/' Facade '/
class NodeApplication {
  {static} -initialized: bool
  -instance: NodeApplication
  -rootJS: Persistent<Object>
 --
 {static} +ctorCallback(args: FunctionCallbackInfo<Value>)
 {static} +staticCtorCallback(args: FunctionCallbackInfo<Value>)

 {static} +memberGetterCallback(property: Local<String>, info: PropertyCallbackInfo<Value>)
 {static} +memberSetterCallback(property: Local<String>, value: Local<Value>, info: PropertyCallbackInfo<Value>)
 {static} +memberFunctionCallback(args: FunctionCallbackInfo<Value>)

 {static} +staticGetterCallback(property: Local<String>, info: PropertyCallbackInfo<Value>)
 {static} +staticSetterCallback(property: Local<String>, value: Local<Value>, info: PropertyCallbackInfo<Value>)
 {static} +staticFunctionCallback(args: FunctionCallbackInfo<Value>)

 {static} +Initialize(exports: Local<Object>, module: Local<Object>)
 {static} -Exit(args: void*)

 {static} +Instance(): NodeApplication

 -NodeApplication(acn: char*, argc: int*, argv: char**) <<constructor>>
 -initROOTGlobals()
 -initROOTMessageCallback()

 -exposeROOT()
 -exposeMacros()
 -exposeClasses()
 -exposeClass(clazz: TClassRef)

 +getIsolate(): Isolate*
 +getExports(): Local<Object>

 +getTemplateFactory(): TemplateFactory
 +getFunctionFactory(): ProxyFunctionFactory
 +getObjectFactory(): ProxyObjectFactory
}

/' ----------------------------------------------------------------------- '/

/' Javascript Prototypes '/
class TemplateFactory {
  -cache: map<string, Persistent<FunctionTemplate>>
  --
  +TemplateFactory() <<constructor>>
  +createTemplate(clazz: TClassRef): Local<FunctionTemplate>
}

/' ----------------------------------------------------------------------- '/

/' Encapsulation '/
abstract class Proxy {
    #address: void*
    #type: TObject
    #scope: TClassRef
    --
    #Proxy(address: void*, type: TObject, scope: TClassRef) <<constructor>>
    {abstract} +setAddress(address: void*)
    +getAddress(): void*
    +getType(): TObject
    +getScope(): TClassRef

    +isGlobal(): bool

    {abstract} +isTemplate(): bool
    {abstract} +isConst(): bool
    {abstract} +isStatic(): bool
}

/' ----------------------------------------------------------------------- '/

/' Encapsulation of ROOT functions '/
class ProxyFunctionFactory {
  +ProxyFunctionFactory() <<constructor>>
  +createProxyFunction(function: TFunction, scope: TClassRef): ProxyFunciton
  +fromArgs(name: string, scope: TClassRef, args: FunctionCallbackInfo): ProxyFunction
}

class ProxyFunction {
  {static} -functions: map<TFunction*, CallFunc*>
  --
  {static} -processCall(method: TFunction*, args: void*, self: void*, result: void*): bool

  {static} -callConstructor(method: TFunction*, type: TClassRef, args: void*): void*
  {static} -callDestructor(type: TClassRef, self: void*): void

  {static} -callObject(method: TFunction*, self: void*, args: void*, resType: TClassRef): void*
  {static} <T> -callPrimitive(TFunction* method, void* self, void* args): T

  {static} +getCallFunc(method: TFunction*): CallFunc*
  {static} +getMethodsFromName(scope: TClassRef, name: string): vector<TFunction*>

  +ProxyFunction(address: void*, function: TFunction, scope: TClassRef) <<constructor>>
  +getType(): TFunction

  +validateArgs(args: FunctionCallbackInfo): ProxyObject[]
  +call(args: ProxyObject[]): ProxyObject

}
/'
+isTemplateFunction(): bool
+isConstFunction(): bool
+isStaticFunction(): bool
+isOperator(): bool
'/

/' ----------------------------------------------------------------------- '/

/' Encapsulation of ROOT objects and primitives '/
class ProxyObjectFactory {
  ' {static} -primitives: map<string, ...>
  --
  +ProxyObjectFactory() <<constructor>>
  +createProxyObject(type: TDataMember, scope: TClassRef, holder: ProxyObject): ProxyObject
}

class ProxyObject {
  #proxy: Persistent<Object>
  --
  +ProxyObject(type: TDataMember, scope: TClassRef) <<constructor>>
  +getType(): TDataMember

  {abstract} +set(value: ProxyObject)
  {abstract} +get(): Local<Value>

  {abstract} +setProxy(proxy: Local<Object>)
  {abstract} +getProxy(): Local<Object>

  {abstract} +isPrimitive(): bool
}


class TemplateProxy {

}

class EnumProxy {

}

class StructProxy {

}

class ArrayProxy {
}

class PointerProxy {

}

class ReferenceProxy {

}

abstract class PrimitiveProxy {

}

class NumberProxy {

}

class StringProxy {

}

class BooleanProxy {

}


/' ----------------------------------------------------------------------- '/

/' Interfacing with ROOT's reflection mechanism - i.e. Cling '/
/' Taken from https://github.com/root-mirror/root/blob/master/bindings/pyroot/src/Cppyy.h '/

/' class FunctionHelper << (N,#A1A1A1) Namespace >> {
  +isConstructor(method: TFunction*): bool
  +isPublicMethod(method: TFunction*): bool
  +isStaticMethod(method: TFunction*): bool
  +isConstMethod(method: TFunction*): bool
  +isMethodTemplate(method: TFunction*): bool

  +getMethodIndexAt(scope: TClassRef, imeth: long): long
  +getMethod(scope: TClassRef, imeth: long): TFunction*
  +getMethodName(method: TFunction*): string
  +getMethodResultType(method: TFunction*): string
  +getMethodNumArgs(method: TFunction*): long
  +getMethodReqArgs(method: TFunction*): long

  +getMethodArgName(method: TFunction*, iarg: int): string
  +getMethodArgType(method: TFunction*, iarg: int): string
  +getMethodArgDefault(method: TFunction*, iarg: int): string
}

class ClassHelper << (N,#A1A1A1) Namespace >> {
  -globals: vector<TGlobal*>
  --
  +isNamespace(scope: TClassRef): bool
  +isAbstract(clazz: TClassRef): bool
  +isEnum(typeName: string): bool
  +isStruct(typeName: string): bool

  +getFinalName(clazz: TClassRef): string
  +getScopedFinalName(clazz: TClassRef): string

  +getNumBases(clazz: TClassRef): long
  +getBaseName(clazz: TClassRef, ibase: long): string
  +isSubtype(derived: TClassRef, base: TClassRef): bool

  +getNumMethods(scope: TClassRef): long

  +getNumDatamembers(scope: TClassRef): long
  +getDatamemberName(scope: TClassRef, idata: long): string
  +getDatamemberType(scope: TClassRef, idata: long): string
  +getDatamemberOffset(scope: TClassRef, idata: long): long
  +getDatamemberIndex(scope: TClassRef, name: string): long
  +getDimensionSize(TClassRef scope, long idata, int dimension): int

  +isPublicData(scope: TClassRef, idata: long): bool
  +isStaticData(scope: TClassRef, idata: long): bool
  +isConstData(scope: TClassRef, idata: long): bool
  +isEnumData(scope: TClassRef, idata: long): bool
  +isStructData(scope: TClassRef, idata: long): bool

  +resolveAddress(member: TDataMember, clazz: TClassRef): void*
}
'/
@enduml
