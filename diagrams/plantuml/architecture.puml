@startuml

!include ./config/diagramsConfig.puml
!include ./config/classConfig.puml

title
rootJS Architecture

end title

/' ----------------------------------------------------------------------- '/

/' Interfaces '/
interface V8
interface ROOT

/' Environment '/
class "ROOT::TApplication" as TApplication
class NodeApplication << (S,#FF7700) Singleton >>

/' Javascript Prototypes '/
class TemplateFactory
class TemplateCache

/' Encapsulation of ROOT functions '/
class ProxyFunctionFactory
class ProxyFunction

/' Encapsulation of ROOT objects and primitives '/
class "node::ObjectWrap" as ObjectWrap

class ProxyObjectFactory
class ProxyObject

class TemplateProxy
class EnumProxy
class StructProxy
class ArrayProxy
class PointerProxy
class ReferenceProxy

abstract class PrimitiveProxy
class NumberProxy
class StringProxy
class BooleanProxy

/' Interfacing with ROOT's reflection mechanism - i.e. Cling '/
class ROOTJS

/' ----------------------------------------------------------------------- '/

/' Relations '/
TApplication <|-down- NodeApplication

NodeApplication -down-> "1" TemplateFactory

TemplateFactory .left.> V8 : uses
TemplateFactory -down-> "1" TemplateCache : access

ROOTJS .up.> ROOT : uses
ROOTJS <-left ProxyFunctionFactory
ROOTJS <-right- ProxyObjectFactory

ProxyFunctionFactory .down.> ProxyFunction : creates

ObjectWrap <|-left- ProxyObject

ProxyObjectFactory .down.> ProxyObject : creates
ProxyObject <|-- TemplateProxy
ProxyObject <|-- EnumProxy
ProxyObject <|-- StructProxy
ProxyObject <|-- ArrayProxy
ProxyObject <|-- PointerProxy
ProxyObject <|-- ReferenceProxy

ProxyObject <|-- PrimitiveProxy
PrimitiveProxy <|-- NumberProxy
PrimitiveProxy <|-- StringProxy
PrimitiveProxy <|-- BooleanProxy

/' ----------------------------------------------------------------------- '/

/' Facade '/
class NodeApplication {
  -instance: NodeApplication
  -rootJS: Persistent<Object>
 --
 {static} +ctorCallback(args: FunctionCallbackInfo<Value>)
 {static} +staticCtorCallback(args: FunctionCallbackInfo<Value>)

 {static} +memberGetterCallback(property: Local<String>, info: PropertyCallbackInfo<Value>)
 {static} +memberSetterCallback(property: Local<String>, value: Local<Value>, info: PropertyCallbackInfo<Value>)
 {static} +memberFunctionCallback(args: FunctionCallbackInfo<Value>)

 {static} +staticGetterCallback(property: Local<String>, info: PropertyCallbackInfo<Value>)
 {static} +staticSetterCallback(property: Local<String>, value: Local<Value>, info: PropertyCallbackInfo<Value>)
 {static} +staticFunctionCallback(args: FunctionCallbackInfo<Value>)

 {static} +Instance(): NodeApplication

 -NodeApplication() <<constructor>>
 +init(exports: Local<Object>, module: Local<Object>)

 -exposeMacros()
 -exposeClasses()
 -exposeClass(clazz: TClassRef)
}

/' ----------------------------------------------------------------------- '/

/' Javascript Prototypes '/
class TemplateFactory {
  --
  +createTemplate(clazz: TClassRef): Local<FunctionTemplate>
}

class TemplateCache {
  -cache: std::map<string, Persistent<FunctionTemplate>>
  --
  +contains(type: TClassRef): bool
  +get(type: TClassRef): Local<FunctionTemplate>
  +store(type: TClassRef, tpl: Local<FunctionTemplate>)
}


/' ----------------------------------------------------------------------- '/

/' Encapsulation of ROOT functions '/
class ProxyFunctionFactory {
  +createProxyFunction(info: TMethod): ProxyFunciton
  +fromArgs(name: string, clazz: TClassRef, args: FunctionCallbackInfo): ProxyFunction
}

class ProxyFunction {
  -address: void*
  -info: TFunction
  --
  +ProxyFunction(address: void*, info: TFunction) <<constructor>>
  +convertArgs(args: FunctionCallbackInfo): ProxyObject[]
  +call(args: ProxyObject[]): ProxyObject
  +isTemplateFunction(): bool
}

/' ----------------------------------------------------------------------- '/

/' Encapsulation of ROOT objects and primitives '/
class ProxyObjectFactory {
  ' {static} -primitives: map<string, ...>
  --
  +createProxyObject(type: TDataMember, holder: ProxyObject): ProxyObject
}

abstract class ProxyObject {
  #address: void*
  #type: TDataMember
  --
  #ProxyObject(address: void*, type: TDataMember) <<constructor>>
  +getAddress(): void*
  +getType(): TDataMember
  {abstract} +set(value: ProxyObject)
  {abstract} +get(): Local<Value>
  {abstract} +isPrimitive(): bool
}

/' ----------------------------------------------------------------------- '/

/' Interfacing with ROOT's reflection mechanism - i.e. Cling '/
class ROOTJS {
  --
  +callFunction(func: TFunction*, args: char*): CallFunc_t*
  +callConstructor(clazz: TClassRef const&, args: char*): CallFunc_t*

  +isConstructor(func: TMethod*): bool
  ...
}

@enduml
