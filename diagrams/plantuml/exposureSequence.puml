@startuml

!include ./config/diagramsConfig.puml
!include ./config/sequenceConfig.puml

title rootJS exposure sequence

participant "<u>rootJS:NodeHandler</u>" as rootJS

/'
participant "<u>gROOT:TROOT</u>" as gROOT
participant "<u>gClassTable:TClassTable</u>" as gClassTable
participant "<u>:TClass</u>" as clazz
'/

[-> rootJS: exposeROOT()
activate rootJS

== expose global functions ==

rootJS -> rootJS : exposeGlobalFunctions()
activate rootJS
rootJS --> rootJS
deactivate rootJS

/'
rootJS -> gROOT : getListOfGlobalFunctions(kTrue)
activate gROOT
rootJS <-- gROOT : functions
deactivate gROOT
loop foreach TFunction f in functions
  rootJS -> v8 : NODE_SET_METHOD(exports, f, createMethodProxy)
  activate v8
  rootJS <-- v8
  deactivate v8
end
'/

== expose global variables ==

rootJS -> rootJS : exposeGlobals()
activate rootJS
rootJS --> rootJS
deactivate rootJS

/'
rootJS -> gROOT : getListOfGlobals()
activate gROOT
rootJS <-- gROOT : globals
deactivate gROOT

loop foreach TGlobal g in globals
  |||
  ref over rootJS, v8, gROOT
    TODO: encapsulate global variable g
  end ref
  |||
end
'/

== expose macros ==

rootJS -> rootJS : exposeMacros()
activate rootJS
rootJS --> rootJS
deactivate rootJS

/'
ref over rootJS, v8, gROOT
    TODO: encapsulate macros like gROOT, gInterpreter, ...
end ref
'/

== expose classes & namespaces ==

rootJS -> rootJS : exposeClasses()
activate rootJS
rootJS --> rootJS
deactivate rootJS

/'
rootJS -> gClassTable : Classes()
activate gClassTable
rootJS <-- gClassTable : numberOfClasses
deactivate gClassTable

loop for i = 0; i < numberOfClasses; i++
  ' Retrive class name
  rootJS -> gClassTable : At(i)
  activate gClassTable
  rootJS <-- gClassTable : className
  deactivate gClassTable

  ' Get pointer to dictionary function of clazz
  rootJS -> gClassTable : getDict(className)
  activate gClassTable
  rootJS <-- gClassTable : (dictionaryFunction)()
  deactivate gClassTable

  ' Call dictionary function on clazz
  rootJS -> clazz : dictionaryFunction()
  activate clazz
  rootJS <-- clazz : tClass
  deactivate clazz

  |||
  ref over rootJS, clazz
      TODO: NODE_SET_PROTOTYPE_METHOD(...)
  end ref
  |||
end
'/

rootJS -->[
deactivate rootJS

@enduml
