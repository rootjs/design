@startuml

!include ./config/diagramsConfig.puml
!include ./config/sequenceConfig.puml

title
FunctionTemplate generation for class exposure

end title

participant "TemplateFactory" as TemplateFactory
participant "ProxyObjectFactory" as ProxyObjectFactory
participant "ProxyFunctionFactory" as ProxyFunctionFactory
participant "<u>classRef: TClassRef</u>" as classRef
participant "<u>functionTemplate: FunctionTemplate</u>" as FunctionTemplate


note left of TemplateFactory
<u>Assertion</u>:
clazz provides public constructor and
is neither abstract nor pure virtual
end note

[-> TemplateFactory: createTemplate(classRef)
activate TemplateFactory

TemplateFactory -> classRef : getClass()
activate classRef
classRef -> TemplateFactory : class
deactivate classRef

TemplateFactory -> FunctionTemplate : New(isolate, CallbackHandler::functionCallback)

activate FunctionTemplate
FunctionTemplate -> TemplateFactory : functionTemplate
deactivate FunctionTemplate

loop class->GetListOfPublicDataMembers() : type [where type->Property() & kIsStatic is true]
  TemplateFactory -> ProxyObjectFactory : createProxyObject(type, scope, holder)
  activate ProxyObjectFactory
  ProxyObjectFactory -> TemplateFactory : proxyObject
  deactivate ProxyObjectFactory
  TemplateFactory -> FunctionTemplate : Set(name, proxyObject->getProxy())
  activate FunctionTemplate
  FunctionTemplate -> TemplateFactory
  deactivate FunctionTemplate
end

loop class->GetListOfMethods() : func [where func->Property() & kIsStatic is true]
  TemplateFactory -> FunctionTemplate : Set(func->GetName(), CallbackHandler::functionCallback)
  activate FunctionTemplate
  FunctionTemplate -> TemplateFactory
  deactivate FunctionTemplate
end

TemplateFactory ->[ : functionTemplate

deactivate TemplateFactory

@enduml
